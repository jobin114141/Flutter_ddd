Documentation 
(DDD - Domain-Driven Design)

lib/
│── core/                # Common utilities, error handling, use cases
│   ├──colors/
│        ├── errors.dart
│   ├── errors/
│   ├── usecases/
│   ├── utils/
│
│── domain/              # Pure business logic (independent of Flutter)
│   ├── entities/
│   ├── repositories/
│   ├── usecases/
│
│── application/         # State management (Bloc, Cubit, or Provider)
│   ├── blocs/
│   ├── events/
│   ├── states/
│
│── infrastructure/      # Data sources and external dependencies
│   ├── data_sources/
│   ├── repositories/
│   ├── models/
│
│── presentation/        # UI layer (Widgets, Pages, and Screens)  each folder of each page should have a widge folder.in main page should have widget bottomnav
│   ├── pages/
│          ├── pagesFolder(eachPage each folder)
│                    ├── main_pages
│   ├── widgets/
│   ├── bloc/            # (optional) If using Bloc, state management is here
│
│── main.dart            # Entry point



        infrasture holds the back end works


neede depencecys
    json_serializable
    flutter_bloc
    freezed
    build_runner
    json_annotation


!!!!
flutter pub run build_runner watch --delete-conflicting-outputs
cloud ai code neede depences

                dependencies:
                  flutter_bloc: ^8.1.3
                  dartz: ^0.10.1
                  freezed_annotation: ^2.4.1
                  json_annotation: ^4.8.1
                  get_it: ^7.6.0

                dev_dependencies:
                  build_runner: ^2.4.6
                  freezed: ^2.4.1
                  json_serializable: ^6.7.1

